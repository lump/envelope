<project name="envelope" basedir="." default="dist">
  <!--xmlns:ivy="antlib:org.apache.ivy.ant">-->
  <property environment="env"/>
  <tstamp>
    <format property="timestamp" pattern="EEE, d MMM yyyy HH:mm:ss Z (z)"/>
  </tstamp>
  <!-- chain of property sets to try to make env.COMPUTERNAME be filled by something -->
  <!-- if any of them are already set, it's all good -->
  <exec executable="hostname" outputproperty="env.HOST"/>
  <property name="env.HOSTNAME" value="${env.HOST}"/>
  <property name="env.COMPUTERNAME" value="${env.HOSTNAME}"/>

  <property name="client.classes" value="${basedir}/client-classes"/>
  <property name="server.classes" value="${basedir}/server-classes"/>
  <property name="classes" value="${basedir}/classes"/>
  <property name="src" value="${basedir}/src"/>
  <property name="test.classes" value="${basedir}/test-classes"/>
  <property name="test.src" value="${basedir}/test"/>

  <property name="lib" value="${basedir}/lib"/>
  <property name="sql" value="${basedir}/sql"/>
  <property name="dist" value="${basedir}/"/>
  <property name="ivy.install.version" value="2.0.0-beta2"/>
  <property name="ivy.jars.dir" value="${basedir}/lib/ivy"/>
  <property name="ivy.jar.file" value="ivy-${ivy.install.version}.jar"/>

  <property name="one.jar" value="${basedir}/one-jar"/>
  <property name="one.jar.classes" value="${dist}/build"/>
  <property name="one.jar.src" value="${one.jar}/src"/>

  <property name="compile.debug" value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize" value="true"/>

  <property name="jar.compress" value="true"/>
  <property name="property.file" value=".build.properties"/>

  <path id="compile.classpath">
    <fileset dir="${lib}" includes="*.jar"/>
    <fileset dir="${lib}/jaxb" includes="*.jar"/>
    <dirset dir="${classes}"/>
    <dirset dir="${test.classes}"/>
  </path>

  <path id="ant.classpath">
    <fileset dir="${lib}/ant">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib}/jaxb">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="ant.classpath"/>

  <taskdef name="xjc"
           classname="com.sun.tools.xjc.XJCTask"
           classpathref="ant.classpath"/>
  <taskdef name="pack200"
           classname="com.sun.tools.apache.ant.pack200.Pack200Task"
           classpathref="ant.classpath"/>
  <taskdef name="unpack200"
           classname="com.sun.tools.apache.ant.pack200.Unpack200Task"
           classpathref="ant.classpath"/>

  <if>
    <not>
      <available file="${property.file}"/>
    </not>
    <then>
      <touch file="${property.file}"/>
    </then>
  </if>

  <property file="${property.file}"/>

  <if>
    <isset property="tomcat.deploy.dir"/>
    <then>
      <echo message="using tomcat deploy dir ${tomcat.deploy.dir}"/>
      <echo message="edit ${property.file} to change your deploy dir"/>

    </then>
    <else>
      <input message="where is your tomcat deploy dir?" addproperty="tomcat.deploy.dir"/>
      <propertyfile file="${property.file}">
        <entry key="tomcat.deploy.dir" value="${tomcat.deploy.dir}"/>
      </propertyfile>
    </else>
  </if>


  <!--<available file="${lib}/${ivy.jar.file}"-->
  <!--type="file" property="ivy.is.there"/>-->

  <!--<target name="download.ivy" unless="ivy.is.there">-->
  <!--<echo message="installing ivy..."/>-->
  <!--<get-->
  <!--src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"-->
  <!--dest="${lib}/${ivy.jar.file}"-->
  <!--usetimestamp="true"/>-->
  <!--<echo message="downloaded ${ivy.jar.file}"/>-->
  <!--</target>-->

  <!--<target name="bootstrap.ivy" depends="download.ivy" unless="ivy.is.loaded">-->
  <!--<path id="ivy.lib.path">-->
  <!--<fileset dir="${lib}" includes="${ivy.jar.file}"/>-->
  <!--</path>-->
  <!--<taskdef resource="org/apache/ivy/ant/antlib.xml"-->
  <!--uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>-->
  <!--<property name="ivy.is.loaded" value="true"/>-->
  <!--<echo message="loaded ${ivy.jar.file}"/>-->

  <!--<mkdir dir="${ivy.jars.dir}"/>-->

  <!--<property name="ivy.instance" value="${ant.project.name}"/>-->
  <!--<ivy:settings file="${basedir}/ivysettings.xml"/>-->
  <!--<ivy:resolve file="${basedir}/ivy.xml"/>-->
  <!--<ivy:cachepath pathid="ivy.lib.path"/>-->
  <!--</target>-->

  <target name="clean.classes" description="clean the classes">
    <delete dir="${classes}"/>
    <delete dir="${client.classes}"/>
    <delete dir="${server.classes}"/>
    <delete dir="${test.classes}"/>
    <delete dir="${one.jar.classes}"/>
  </target>

  <target name="dist" depends="client.dist, server.war"
          description="make the client and server distribution jars">
    <echo message="dist done."/>
  </target>

  <target name="prepare" depends="clean.classes">
    <mkdir dir="${classes}"/>
    <mkdir dir="${test.classes}"/>
  </target>

  <target name="generate-ofx" description="generate ofx class files">
    <xjc package="net.ofx.types" destdir="${src}">
      <schema dir="lib/ofx/schema"
              includes="OFX_TypeDefinitions.xsd, OFX2_Protocol.xsd"/>
    </xjc>
  </target>

  <!--target name="compile" depends="prepare,generate-ofx"
          description="compile sources"-->
  <!--<target name="compile" depends="prepare,bootstrap.ivy"-->
  <target name="compile" depends="prepare"
          description="compile sources">
    <javac srcdir="${src}"
           destdir="${classes}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <compilerarg value="-Xlint:unchecked"/>
      <classpath refid="compile.classpath"/>
      <!--<classpath refid="ivy.lib.path"/>-->
    </javac>
    <copy todir="${classes}">
      <fileset dir="${src}"
               includes="**/*.properties, **/*.xml, **/*.policy, **/*.gif, **/*.png, **/*.ico, **/*.icns"/>
    </copy>

    <javac srcdir="${test.src}"
           destdir="${test.classes}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
      <compilerarg value="-Xlint:unchecked"/>
      <classpath refid="compile.classpath"/>
    </javac>

  </target>

  <target name="client.dist.prepare" depends="compile">
    <delete dir="${client.classes}"/>
    <mkdir dir="${client.classes}"/>
    <unzip dest="${client.classes}">
      <fileset dir="${lib}"
               includes="log4j*.jar,
                         forms_rt.jar,
                         commons*.jar,
                         ehcache*.jar,
                         alloy.jar,
                         ui.jar,
                         hibernate*.jar,
                         jcalendar*.jar"/>
    </unzip>
    <delete dir="${client.classes}/META-INF"/>
    <copy todir="${client.classes}">
      <!--includes="Envelope.class, us/lump/lib/util/ChildFirstClassLoader.class"/>-->
      <fileset dir="${classes}"
               includes="security.policy, Envelope.class, us/lump/**/*"
               excludes="us/lump/envelope/server/**/*, us/lump/envelope/Client.java"/>
    </copy>
  </target>

  <target name="client.jar" depends="client.dist.prepare"
          description="build client jar">
    <delete file="${dist}/client.jar"/>
    <jar jarfile="${dist}/client.jar"
         compress="${jar.compress}"
         basedir="${client.classes}">
      <manifest>
        <attribute name="Main-Class" value="Envelope"/>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Build-Time" value="${timestamp}"/>
        <attribute name="Built-On-OS"
                   value="${os.name} ${os.version} ${os.arch}"/>
        <attribute name="Built-On-VM" value="${java.version} ${java.vendor}"/>
        <attribute name="Built-On-Host" value="${env.COMPUTERNAME}"/>
        <!--<attribute name="Class-Path" value="http://localhost:7041/"/>-->
      </manifest>
    </jar>
  </target>

  <target name="client.dist" depends="client.jar"
          description="create client distribution jar and sign and pack200 it">
    <pack200 src="${dist}/client.jar"
             destfile="${dist}/client.pack200.jar"
             repack="true"
             deflatehint="false"
             unknownattribute="error"
             stripdebug="true"
             modificationtime="keep"
             segmentlimit="-1"
             keepfileorder="true"
             effort="1"
             gzipoutput="false"/>

    <move verbose="true"
          overwrite="true"
          file="${dist}/client.pack200.jar"
          tofile="${dist}/client.jar"/>

    <signjar alias="envelope"
             keystore="security/keystore"
             storepass="OS.32sf"
             preservelastmodified="false"
             lazy="true">
      <fileset dir="${dist}" includes="client.jar"/>
    </signjar>
    <pack200 src="${dist}/client.jar"
             destfile="${dist}/client.jar.pack.gz"
             repack="false"
             deflatehint="false"
             unknownattribute="error"
             stripdebug="true"
             modificationtime="keep"
             segmentlimit="-1"
             keepfileorder="true"
             effort="1"
             gzipoutput="true"/>
    <!--<delete file="${dist}/client.pack200.jar"/>-->
  </target>

  <target name="server.jar" depends="compile" description="build server jar">
    <delete file="${dist}/${ant.project.name}-server.jar"/>
    <jar jarfile="${dist}/${ant.project.name}-server.jar"
         compress="${jar.compress}"
         basedir="${classes}">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Build-Time" value="${timestamp}"/>
        <attribute name="Built-On-OS"
                   value="${os.name} ${os.version} ${os.arch}"/>
        <attribute name="Built-On-VM" value="${java.version} ${java.vendor}"/>
        <attribute name="Built-On-Host" value="${env.COMPUTERNAME}"/>
      </manifest>
    </jar>
  </target>

  <target name="server.war" depends="server.jar, client.dist"
          description="build a server web archive for tomcat">

    <property name="war.dir" value="war-build"/>
    <delete file="${dist}/envelope.jar"/>
    <delete dir="${war.dir}"/>
    <mkdir dir="${war.dir}"/>
    <mkdir dir="${war.dir}/WEB-INF/lib"/>
    <copy todir="${war.dir}/WEB-INF/lib">
      <fileset dir="${lib}" includes="*.jar, *.pack.gz *.png"/>
      <fileset dir="${dist}" includes="client*.jar, client*gz, ${ant.project.name}-server.jar"/>
      <fileset dir="src/us/lump/envelope/client/ui/images"
               includes="envelope_32.png, envelope.ico, envelope.icns"/>
    </copy>
    <copy todir="${war.dir}">
      <fileset dir="web" includes="**/**"/>
    </copy>

    <jar jarfile="${dist}/${ant.project.name}.war" basedir="${war.dir}">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Build-Time" value="${timestamp}"/>
        <attribute name="Built-On-OS" value="${os.name} ${os.version} ${os.arch}"/>
        <attribute name="Built-On-VM" value="${java.version} ${java.vendor}"/>
        <attribute name="Built-On-Host" value="${env.COMPUTERNAME}"/>
      </manifest>
    </jar>

    <copy file="${dist}/${ant.project.name}.war" todir="${tomcat.deploy.dir}"/>
    <delete dir="${war.dir}"/>
  </target>

</project>
